#!/bin/sh

set -e

# Build dependencies: git, svn, curl, unzip, tar, meson (+ python), ninja
# Dependencies for making Arch package: pacman (makepkg)
# Dependencies for making .deb package: dpkg-deb
# Dependencies for making .tar package: fakeroot

: "${packager:="Michal Vlas√°k <lahcim8@gmail.com>"}"

get_package_sources() (
	echo "Getting sources.."
	mkdir -p "$srcdir"
	cd "$srcdir"
	sed -e 's/#.*//' -e 's/\s\+$//' -e '/^$/ d' "$basedir/sources" | while read -r src dest; do
		case "$src" in
		git+*)
			url=${src##git+}
			ref=${url##*@}
			url=${url%@*}
			: "${dest:="${url##*/}"}"

			echo "Getting git repository '$url'.."
			if [ ! -d "$dest" ]; then
				git clone --depth=1 --branch="$ref" -c advice.detachedHead=false "$url" "$dest"
			fi
		;;
		svn+*)
			url=${src##svn+}
			: "${dest:="${url##*/}"}"

			echo "Getting subversion repository '$url'.."
			if [ ! -d "$dest" ]; then
				svn checkout --username anonsvn --password anonsvn "$url" "$dest"
			fi
		;;
		svnfile+*)
			url=${src##svnfile+}
			: "${dest:="${url##*/}"}"

			echo "Getting subversion file '$url'.."
			if [ ! -f "$dest" ]; then
				svn export --force --username anonsvn --password anonsvn "$url" "$dest"
			fi
		;;
		http://*|https://*)
			url=$src
			: "${dest:="${url##*/}"}"

			echo "Getting remote source '$url'.."
			if [ ! -f "$dest" ]; then
				curl -fLo "$dest" "$url"
			fi

			case "$dest" in
			*.zip)
				unzip -uo "$dest" ;;
			*.tar*)
				tar -xf "$dest" ;;
			esac
		;;
		*)
			echo "Getting local source '$src'.."
			cp -rf "$basedir/files/$src" .
		esac
	done
)

build_package() {
	if [ ! -d "$pkgname" ]; then
		echo "Invalid package name '$pkgname' - no such directory" >&2
		exit 1
	fi

	basedir=$(readlink -f "$pkgname")
	pkgdir=$(readlink -fm "pkg/$pkgname")
	srcdir=$(readlink -fm "src/$pkgname")

	. "$basedir/info"

	get_package_sources

	# export compilation variables, fallback to some defaults
	export CC CXX LD CPPFLAGS CFLAGS CXXFLAGS LDFLAGS MAKEFLAGS
	: "${CC:="gcc"}"
	: "${CXX:="$CC"}"
	: "${LD:="$CC"}"
	: "${CPPFLAGS:="-D_FORTIFY_SOURCE=2"}"
	: "${CFLAGS:="-march=x86-64 -mtune=generic -O2 -pipe -fno-plt"}"
	: "${CXXFLAGS:="${CFLAGS}"}"
	: "${LDFLAGS:="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"}"
	: "${MAKEFLAGS:="-j$(nproc)"}"

	# ensure clean pkgdir
	#rm -rf "$pkgdir"
	mkdir -p "$pkgdir"

	echo "Running build script.."
	(
		cd "$srcdir"
		"$basedir/build" "$pkgdir" "$pkgname" "$pkgver"
	)
}

deb_package() {
	echo "Creating .deb package."

	# uses `dpkg-deb` to create .deb from a pkg directory

	mkdir -p "$pkgdir/DEBIAN"
	cat > "$pkgdir/DEBIAN/control" <<- EOF
	Package: $pkgname
	Version: $pkgver
	Depends: $debian_depends
	Section: user/hidden
	Priority: optional
	Architecture: $debian_arch
	Maintainer: $packager
	Description: $pkgdesc
	EOF

	dpkg-deb --root-owner-group -b "$pkgdir" "${pkgname}_${pkgver}_${debian_arch}.deb"
	rm -rf "$pkgdir/DEBIAN"
}

arch_package() {
	echo "Creating Arch Linux package."

	# uses `makepkg`'s functions to create .pkg.tar.* from a pkg directory

	# create package in fakeroot to ensure correct permissions
	fakeroot -- bash <<- EOF
	pkgname="$pkgname"
	url="$pkgurl"
	pkdir="$pkgdir"
	arch=("$arch_arch")
	pkgdir="$pkgdir"
	pkgrel=1
	pkgbase="$pkgname"
	pkgver="$pkgver"
	pkgdesc="$pkgdesc"
	depends=($arch_depends)
	PACKAGER="$packager"
	PKGDEST="$(readlink -f .)"
	PACMAN_PATH=\$(type -P pacman)
	BUILDFILE=/dev/null

	sed -n '1,/# PROGRAM START/ p' /usr/bin/makepkg > mkpkg
	trap 'rm -f mkpkg' EXIT
	source mkpkg

	load_makepkg_config
	create_package
	EOF
	rm -f "$pkgdir/.PKGINFO" "$pkgdir/.BUILDINFO" "$pkgdir/.MTREE" mkpkg
}

tar_package() {
	echo "Creating .tar.gz package"

	# tar in fakeroot to ensure correct permissions, strip `/usr` prefix
	fakeroot -- tar -caf "${pkgname}-${pkgver}.tar.gz" -C "$pkgdir/usr" .
}

deb_pkg=0 arch_pkg=0 tar_pkg=0
for arg in "$@"; do
	case "$arg" in
	--deb)  deb_pkg=1  ;;
	--arch) arch_pkg=1 ;;
	--tar)  tar_pkg=1  ;;
	--all)  deb_pkg=1 arch_pkg=1 tar_pkg=1 ;;
	*)
		pkgname=$arg
		build_package
		if [ $deb_pkg  -eq 1 ]; then deb_package ; fi
		if [ $arch_pkg -eq 1 ]; then arch_package; fi
		if [ $tar_pkg  -eq 1 ]; then tar_package ; fi
	esac
done
